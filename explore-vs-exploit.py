# -*- coding: utf-8 -*-
"""
Matthew Allcock
"""

import numpy as np
import matplotlib.pyplot as plt

"""
Pseudo-code

- Set parameters of normal distribution
- Repeat:
    - Player 1: Draw value from this distribution
    - Player 2: Draw value from this distribution
    - until both players have decided to stop.
- Calculate scores - highest number drawn minus number of draws.


Possible extensions:
- Distribution parameters: random? chosen by player? 3rd party?
  how about not normal?
- play against computer - different ability?
- n players.
"""

# Set distibution parameters
mu = 10
sd = 5

# Set the penalty for each draw
penalty = 1

# Set number of players
n_players = 2

# Initialise arrays for draws and scores.
draws = np.empty(n_players)
draws[:] = np.nan
score = np.zeros((1, n_players))
max_draw = np.empty(n_players)
new_score = np.empty(n_players)

# Initialise an array of truth values. False if no longer drawing numbers.
redraw = np.ones(n_players, dtype=bool)

# Draw counters
draw_num = 0
player_draw_num = np.ones(n_players).astype(int)

while np.any(redraw):
    draw_num += 1
    print("\n\n**************** Draw number " + str(draw_num) +
          " ****************")
    
    # Everyone must draw first
    if draw_num == 1:
        # loop through players
        for j in range(n_players):
            draw = np.round(np.random.normal(mu, sd), 2)
            max_draw[j] = draw
            new_score[j] = max_draw[j] - penalty*player_draw_num[j]
            print("Drew " + str(draw) + ", Player " + str(j + 1) +
                  " max draw is " + str(max_draw[j]) + ". Score is " +
                  str(new_score[j]))
        score[0, :] = new_score

    # In subsequent draws, each player can choose to draw or not
    if draw_num > 1:
        # loop through players
        for j in range(n_players):
            if redraw[j] == False:
                print("Player " + str(j + 1) + " is no longer drawing. "
                      "Max draw is " + str(max_draw[j]) + ".")
                continue
            val = input("Player " + str(j + 1) + " redraw? (y, n)")
            if val == "y":
                player_draw_num[j] += 1
                redraw[j] = True
                draw = np.round(np.random.normal(mu, sd), 2)
                max_draw[j] = max(max_draw[j], draw)
                new_score[j] = max_draw[j] - penalty*player_draw_num[j]
                print("Drew " + str(draw) + ", Player " + str(j + 1) +
                      " max draw is " + str(max_draw[j]) + ".")
            elif val == "n":
                redraw[j] = False
                print("No draw. Player " + str(j + 1) + " max draw is " +
                      str(max_draw[j]) + ".")
                continue
            else:
                raise ValueError('Input must be "y" or "n".')

        if np.any(redraw):
            # Stack latest score in array with previous scores
            score = np.vstack((score, new_score))

print("\n\n**************** Game ended after " + str(draw_num) +
      " draws ****************")

# Print end game info
for j in range(n_players):
    print("Player " + str(j + 1) + " drew " + str(int(player_draw_num[j])) +
          " numbers.")
print("Final scores: " + str(score[-1,:]))
print("\nWinner is Player " + str(np.argmax(score[-1]) + 1) + ".")

# Plot scores against number of draws for each player
for j in range(n_players):
    label = "Player " + str(j + 1)
    plt.plot(range(1, draw_num), score[:, j], label=label)
    plt.scatter(player_draw_num[j], score[player_draw_num[j] - 1, j])

# Set axis labels
plt.xlabel("Number of draws")
plt.ylabel("Score")

# Add legend
plt.legend()
