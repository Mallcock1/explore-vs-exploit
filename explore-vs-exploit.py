# -*- coding: utf-8 -*-
"""
Matthew Allcock
"""

import numpy as np
import matplotlib.pyplot as plt
import draw
import strategies as strat


class Game:
    def __init__(self, n_players, dist_type, dist_params, penalty):
        """
        Pseudo-code
        
        - Set parameters of normal distribution
        - Repeat:
            - Player 1: Draw value from this distribution
            - Player 2: Draw value from this distribution
            - until both players have decided to stop.
        - Calculate scores - highest number drawn minus number of draws.


        Inputs:
            n_players = number of players (int),
            dist_type = type of distribution from which players draw
                        ("normal", "uniform", "lomax")
            dist_params = parameters of the distribution from which players
                          draw (list)
        """

        self.n_players = n_players
        self.dist_type = dist_type
        self.dist_params = dist_params
        self.penalty = penalty
        
        # Initialise arrays for draws and scores.
        self.draws = np.empty((1, self.n_players))
        self.draws[:] = np.nan
        self.score = np.zeros((1, self.n_players))
        self.max_draw = np.empty(self.n_players)
        self.player_draw_num = np.ones(self.n_players).astype(int)
        

    
    def run_game(self, human=False, strategy=None, plot=False):
        """
        Inputs:
            human (bool) = are the players human?
            strategy (string: "Perfect", "Myopic", "Less myopic") = what strategy are AI
                                                      players following?
        """
        
        if human:
            printing = True
            hide = True
        else:
            printing = False
            
        # Initialise an array of truth values. False if no longer drawing numbers.
        redraw = np.ones(self.n_players, dtype=bool)
        self.player_draw_num = np.ones(self.n_players).astype(int)

        # Draw counters
        draw_num = 0
        
        new_score = np.empty(self.n_players)
        new_draw = np.empty(self.n_players)
        
        while np.any(redraw):
            draw_num += 1
            if printing:
                print("\n\n**************** Draw number " + str(draw_num) +
                      " ****************")
            
            # Everyone must draw first
            if draw_num == 1:
                # loop through players
                
                for j in range(self.n_players):
                    new_draw[j] = draw.draw(self.dist_type, self.dist_params)
                    self.max_draw[j] = new_draw[j]
                    new_score[j] = self.max_draw[j] - self.penalty*self.player_draw_num[j]
                    if printing:
                        print("\nPlayer " + str(j + 1) + " drew " + 
                              str(new_draw[j]) + "\nPlayer " + str(j + 1) +
                              " max draw is " + str(self.max_draw[j]) +
                              ".\nPlayer " + str(j + 1) +
                              " current score is " +
                              "{0:.2f}".format(new_score[j]))
                        if hide == True:
                            input("Press Enter to continue...")
                            print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
                                  "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
                                  "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")

                self.score[0, :] = new_score
                self.draws[0, :] = new_draw
            # In subsequent draws, each player can choose to draw or not
            if draw_num > 1:
                # loop through players
                for j in range(self.n_players):
                    if redraw[j] == False:
                        new_draw[j] = np.nan
                        if printing:
                            print("\nPlayer " + str(j + 1) +
                                  " is no longer drawing.")
                        continue
                    if human:
                        val = input("Player " + str(j + 1) + " redraw? (y, n)")
                        while val != "y" and val != "n":
                            val = input("Player " + str(j + 1) + " redraw? (y, n)")
                        if val == "y":
                            redraw[j] = True
                        elif val == "n":
                            redraw[j] = False
                        else:
                            raise ValueError('Input must be "y" or "n".')
                    else:
                        redraw[j] = strat.to_redraw(strategy[j],
                                                         self.dist_type,
                                                         self.dist_params,
                                                         self.penalty,
                                                         self.draws[:,j])
                    if redraw[j] == True:
                        self.player_draw_num[j] += 1
                        new_draw[j] = draw.draw(self.dist_type, self.dist_params)
                        self.max_draw[j] = max(self.max_draw[j], new_draw[j])
                        new_score[j] = self.max_draw[j] - self.penalty*self.player_draw_num[j]
                        if printing:
                            print("\nPlayer " + str(j + 1) + " drew " + str(new_draw[j]) + ",\nPlayer " + str(j + 1) +
                                  " max draw is " + str(self.max_draw[j]) +
                                  ".\nPlayer " + str(j + 1) + " current score is " + str(new_score[j]))
                            if hide == True:
                                input("Press Enter to continue...")
                                print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
                                      "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
                                      "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
                    elif redraw[j] == False:
                        new_draw[j] = np.nan
                        if printing:
                            print("\nNo draw.\nPlayer " + str(j + 1) +
                                  " max draw is " + str(self.max_draw[j]) +
                                  ".\nPlayer " + str(j + 1) + " current score is " + str(new_score[j]))
                            if hide == True:
                                input("Press Enter to continue...")
                                print("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
                                      "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
                                      "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
                        continue
                    else:
                        raise ValueError('strat.to_draw did not return True or False.')
        
                if np.any(redraw):
                    # Stack latest score in array with previous scores
                    self.score = np.vstack((self.score, new_score))
                    self.draws = np.vstack((self.draws, new_draw))
        
        if printing:
            print("\n\n**************** Game ended after " +
                  str(draw_num - 1) + " draws ****************")
        
        if printing:
            # Print end game info
            for j in range(self.n_players):
                print("\nPlayer " + str(j + 1) + " drew " + str(int(self.player_draw_num[j])) +
                      " numbers.")
            print("\nFinal scores: ")
            for j in range(self.n_players):
                print("Player " + str(j + 1) + ": " + str(self.score[-1,j]))
            print("\n***************************************************"
                  "\n**************** Winner is Player " + str(np.argmax(self.score[-1]) + 1) + " ****************"
                  "\n***************************************************")
            
        if plot == True:
            # Plot scores against number of draws for each player
            fig = plt.figure()
            for j in range(self.n_players):
                if human == True:
                    label = "Player " + str(j + 1)
                else:
                    label = strategy[j]
                plt.plot(list(range(1, max(self.player_draw_num) + 1)), self.score[:, j], label=label)
                plt.scatter(self.player_draw_num[j], 
                            self.score[self.player_draw_num[j] - 1, j])
            
            # Set axis labels
            plt.xlabel("Draw number")
            plt.ylabel("Score")
            
            # Add legend
            plt.legend()
        
        return [self.score, self.draws]
    
    
class Game_mc:
    # Monte carlo simulation of game with computer players.
    def __init__(self, n_players, dist_type, dist_params, penalty, n_games):
        """
        Inputs:
            n_players = number of players (int),
            dist_type = type of distribution from which players draw
                        ("normal", "uniform", "lomax")
            dist_params = parameters of the distribution from which players
                          draw (list)
        """
    
        self.n_players = n_players
        self.dist_type = dist_type
        self.dist_params = dist_params
        self.penalty = penalty
        self.n_games = n_games
        
        self.scores = []
        
        self.draws = []
    
    def run_game(self, strategy=None):
        """
        Inputs:
            human (bool) = are the players human?
            strategy (string: "Perfect", "Myopic") = what strategy are AI
                                                      players following?
        """
        
        for i in range(self.n_games):
            # run a game (seems like we have to create a new instatiation of
            # the Game class each time though, not sure why)
            game = Game(self.n_players, self.dist_type, self.dist_params, self.penalty)
            game_scores, game_draws = game.run_game(human=False,
                                                    strategy=strategy)
            
            #append this game's scores and draws to the score and draw lists
            self.scores.append(game_scores)
            self.draws.append(game_draws)
        
        return [self.scores, self.draws]
    
    def av_num_draws(self):
        """
        Calculate the average number of draws each player took over the n_games
        """
        
        num_draws = np.empty((self.n_players, self.n_games))
        for i in range(self.n_games):
            for j in range(self.n_players):
                num_draws[j,i] = np.count_nonzero(~np.isnan(self.draws[i][:,j]))
        
        av_num_draws = np.mean(num_draws, 1)
        
        return av_num_draws
        
        
    def av_score(self):
        """
        Calculate the average score of each player over the n_games
        """
        game_scores = np.empty((self.n_players, self.n_games))
        for i in range(self.n_games):
            for j in range(self.n_players):
                game_scores[j,i] = self.scores[i][-1,j]
        
        av_scores = np.mean(game_scores, 1)
        
        return av_scores
    
    def ex_score(self):
        """
        Calculate the exremum scores of each player over the n_games
        """
        game_scores = np.empty((self.n_players, self.n_games))
        for i in range(self.n_games):
            for j in range(self.n_players):
                game_scores[j,i] = self.scores[i][-1,j]
        
        max_scores = np.max(game_scores, 1)
        min_scores = np.min(game_scores, 1)
        
        return [min_scores, max_scores]
    
        
        
###############################################################################
        
game = Game_mc(3, "normal", [0,1], 0.01, 10000)

#game = Game_mc(2, "lomax", [2,1], 0.01, 100)
game.run_game(strategy=["Perfect", "Less myopic", "Myopic"])
print("Average number of draws:", game.av_num_draws())
print("Average scores:", game.av_score())
print("Min scores:", game.ex_score()[0])
print("Max scores:", game.ex_score()[1])
    
    
    
    
#    
#    
##game = Game(2, "lomax", [2,1], 0.01)
##game = Game(3, "normal", [8.3,5], 1)
#game = Game(3, "normal", [0,1], 0.01)
##game = Game(2, "normal", [0,1], 0.01)
#game.run_game(human=False, strategy=["Myopic", "Less myopic", "Perfect"], plot=True)
##game.run_game(human=False, strategy=["Perfect", "Myopic"])
##input("Press Enter to continue...")
##game.plot_scores()
