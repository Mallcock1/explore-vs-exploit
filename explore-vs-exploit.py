# -*- coding: utf-8 -*-
"""
Matthew Allcock
SP2RC, University of Sheffield
"""

import numpy as np
import matplotlib.pyplot as plt

"""
Pseudo-code

- Set parameters of normal distribution
- Repeat:
    - Player 1: Draw value from this distribution
    - Player 2: Draw value from this distribution
    - until both players have decided to stop.
- Calculate scores - highest number drawn minus number of draws.


Possible extensions:
- Distribution parameters: random? chosen by player? 3rd party?
  how about not normal?
- play against computer - different ability?
- n players.
"""

# set distibution parameters
mu = 10
sd = 5
n_players = 2

draws = np.empty((n_players, 1))
draws[:] = np.nan
score = np.zeros(n_players)

redraw = np.ones(n_players, dtype=bool)

draw_num = 0

#while np.any(redraw):
#    new_draws = np.empty((n_players, 1))
#    new_draws[:] = np.nan
#    # loop through players
#    if n_draws == 0:
#        print("n_draws = " + str(n_draws))
#        for j in range(n_players):
#            val = input("Player " + str(j + 1) + " redraw? (y, n)")
#            print(val)
#            if val == "y":
#                redraw[j] = True
#                new_draws[j] = np.random.normal(mu, sd)
#            elif val == "n":
#                redraw[j] = False
#            else:
#                raise ValueError('Input must be "y" or "n".')
#        draws = np.hstack([draws, new_draws])
#        n_draws += 1
#    else:
#        print("n_draws = " + str(n_draws))
#        for j in range(n_players):
#            if redraw[j] is True:
#                val = input("Player " + str(j + 1) + " redraw? (y, n)")
#                print(val)
#                if val == "y":
#                    redraw[j] = True
#                    new_draws[j] = np.random.normal(mu, sd)
#                elif val == "n":
#                    redraw[j] = False
#                else:
#                    raise ValueError('Input must be "y" or "n".')
#        draws = np.hstack([draws, new_draws])
#        n_draws += 1
#
#np.sum(~np.isnan(draws), 1)

max_draw = np.empty(n_players)
player_draw_num = np.ones(n_players).astype(int)
while np.any(redraw):
    
    draw_num += 1
    print("\n\n**************** Draw number " + str(draw_num) +
          " ****************")

    if draw_num == 1:
        # loop through players
        for j in range(n_players):
            draw = np.round(np.random.normal(mu, sd), 2)
            max_draw[j] = draw
            score[j] = max_draw[j] - player_draw_num[j]
            print("Drew " + str(draw) + ", Player " + str(j + 1) +
                  " max draw is " + str(max_draw[j]) + ". Score is " +
                  str(score[j]))
        new_score = score
        print(new_score)
    if draw_num > 1:
        # loop through players
        for j in range(n_players):
            if redraw[j] == False:
                print("No longer drawing. Player " + str(j + 1) +
                      " max draw is " + str(max_draw[j]) + ".")
                continue
            val = input("Player " + str(j + 1) + " redraw? (y, n)")
            if val == "y":
                redraw[j] = True
                draw = np.round(np.random.normal(mu, sd), 2)
                max_draw[j] = max(max_draw[j], draw)
                player_draw_num[j] += 1
                new_score[j] = max_draw[j] - player_draw_num[j]
                print("Drew " + str(draw) + ", Player " + str(j + 1) +
                      " max draw is " + str(max_draw[j]) + ".")
            elif val == "n":
                redraw[j] = False
                print("No draw. Player " + str(j + 1) + " max draw is " +
                      str(max_draw[j]) + ".")
            else:
                raise ValueError('Input must be "y" or "n".')
        print(score)
        score = np.vstack((score, new_score))
        print(score)

print("\n\n**************** Game ended after " + str(draw_num) +
      " draws ****************")
for j in range(n_players):
    print("Player " + str(j + 1) + " drew " + str(int(player_draw_num[j])) +
          " numbers.")
print("Final scores: " + str(score[-1,:]))
print("\nWinner is Player " + str(np.argmax(score[draw_num - 1]) + 1) + ".")

for j in range(n_players):
    label = "Player " + str(j + 1)
    plt.plot(range(1, draw_num + 1), score[:, j], label=label)
    plt.scatter(player_draw_num[j], score[player_draw_num[j], j])
plt.xlabel("Number of draws")
plt.ylabel("Score")
plt.legend()
