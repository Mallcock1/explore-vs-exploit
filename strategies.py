# -*- coding: utf-8 -*-
"""
Matthew Allcock
"""

"""
Each strategy consists of a redrawing rule. Each strategy has a corresponding
function which returns a boolean answer to the question: Draw again?
"""

import numpy as np

def to_redraw(strategy, dist_type, dist_params, penalty, draws):
    ########### Perfect information - using optimal stopping theory
    if strategy == "perfect":
        if dist_type == "uniform":
            # Optimal stopping rule can be calculated analytically.
            [a, b] = dist_params
            midpoint = 0.5*(a + b)
            if penalty <= midpoint:
                V = b - np.sqrt(2*(b-a)*penalty)
            else:
                V = -penalty + midpoint
    
        elif dist_type == "lomax":
            # Optimal stopping rule can be calculated analytically.
            [alpha, xm, lamb] = dist_params
            threshold = lamb/(alpha - 1)
            if penalty <= threshold:
                V = (lamb**alpha/(penalty*(alpha - 1)))**(1/(alpha - 1))
            else:
                V = -penalty + threshold
        
        else:
            # Optimal stopping rule cannot be calculated analytically.
            # Could consider calculating numerically?
            raise ValueError("Haven't coded the optimal strategy for normal"
                             "distribution yet")
        if draws[-1] >= V:
            redraw = False
        else:
            redraw = True
    
    elif strategy == "partial":
        raise ValueError("Haven't coded this strategy yet")
#        if dist_type == "uniform":
#    
#        elif dist_type == "lomax":
#    
#        else:
#    
#        if draws[-1] >= V:
#            redraw = True
#        else:
#            redraw = False
            
    return redraw



############ Partial information - Using maximum likelihood given known
############ distribution type.
#    
#def part_inf(dist_type, penalty, draws):
#    if dist_type == "uniform":
#
#
#    elif dist_type == "lomax":
#
#        
#    else:
#
#    
#    if draws[-1] >= V:
#        redraw = True
#    else:
#        redraw = False
#    return redraw

